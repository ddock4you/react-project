{"version":3,"sources":["components/Detail/Sidebar/Sidebar.js","components/Detail/Header/Header.js","components/Detail/Content/Content.js","components/Detail/Info/Info.js","components/Detail/Comments/Comments.js","components/Detail/CommentList/CommentList.js","components/Detail/Close/Close.js","components/Detail/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","react_default","a","createElement","className","Header","Content","react","Info","Comments","_this$props","this","props","cmtReplyToggle","cmtLike","cmtHeartStatus","cmtHeartCnt","comments","onClick","name","Component","CommentList","state","cmtInput","cmtReply","handleChange","e","_this","setState","target","value","enterInput","key","handleInsert","_this$state","addCmt","cmtText","Object","toConsumableArray","concat","_this$state2","_this$state3","commentArray","map","cmt","index","Detail_Comments_Comments","onKeyPress","onChange","Close","closeDetail","document","querySelector","innerHTML","Detail","Detail_Close_Close","Detail_Sidebar_Sidebar","Detail_Header_Header","Detail_Content_Content","Detail_Info_Info","Detail_CommentList_CommentList","App","components_Detail_Detail","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3c5786d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Sidebar = () => {\n    return (\n        <div className=\"detail-sidebar\">\n            <i className=\"fab fa-facebook-f\"></i>\n            <i className=\"fab fa-twitter\"></i>\n            <i className=\"fab fa-instagram\"></i>\n        </div>\n    );\n};\n\nexport default Sidebar;","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div className=\"detail-header\">\n            <div className=\"userImage\">\n                <i className=\"fas fa-user\"></i>\n            </div>\n            <div className=\"detail-header-info\">\n                <div>이름</div>\n                <div className=\"write-date\">\n                    3시간 전 1,000+ Views\n                </div>\n                <i>...</i>\n            </div>\n        </div>\n    );\n};\n\nexport default Header;","import React, { Fragment } from 'react';\n\nconst Content = () => {\n    return (\n        <Fragment>\n            <div className=\"detail-editer\">\n                <h3>가나다라마바사</h3>\n                <div className=\"detail-editer-content\">\n                    작성자가 작성한 내용이 표시되는 곳<br/>\n                    asdfasdg<br/>\n                    fdgdsfg<br/>\n                    dfsdfgsdf<br/>\n                </div>\n            </div>\n            <div className=\"detail-tag\">\n                #가나다&nbsp;#가나다&nbsp;#가나다&nbsp;#가나다&nbsp;\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Content;","import React, { Fragment } from 'react';\n\nconst Info = () => {\n    return (\n        <Fragment>\n            <div className=\"detail-userInfo\">\n                <div className=\"detail-userInfo-img\">\n                    <hr/>\n                    <div className=\"userImage\">\n                        <i className=\"fas fa-user\"></i>\n                    </div>\n                    <hr/>\n                </div>\n                <div className=\"detail-userInfo-bottom\">\n                    <div className=\"user-name\">asdfasg</div>\n                    <div className=\"user-hobby\">책 ・ 게임  ・ 영확감상</div>\n                    <div className=\"user-intro\">매주 200 만명이 받아보는 멘탈관리 컨텐츠</div>\n                    <button>+팔로우</button>\n                </div>\n            </div>\n            <div className=\"detail-count\">\n                <div className=\"detail-count-like\">\n                    <div className=\"detail-count-like-img\">\n                        <div className=\"userImage\">\n                            <i className=\"fas fa-user\"></i>\n                        </div>\n                    </div>\n                    <span>좋아요 2개</span>\n                </div>\n                <div className=\"detail-count-share\">보내기 2회</div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Info;","import React, { Component, Fragment } from 'react';\n\nclass Comments extends Component {\n    render() {\n        const { cmtReplyToggle, cmtLike, cmtHeartStatus, cmtHeartCnt, comments } = this.props;\n        return (\n            \n            <Fragment>\n                <li>\n              <div className=\"comment-profile\">\n                <div className=\"userImage\">\n                  <i className=\"fas fa-user\" />\n                </div>\n              </div>\n              <div className=\"comment\">\n                <div className=\"comment-header\">사용자 아이디</div>\n                <div className=\"comment-content\">{comments}</div>\n                <div className=\"comment-footer\">\n                  <div className=\"comment-footer-left\">\n                    <span className=\"comment-date\">18시간</span>\n                    <span className=\"comment-reply-btn\" onClick={cmtReplyToggle}>답글 달기</span>\n                  </div>\n                  <div className=\"comment-footer-right\">\n                    <div className=\"comment-like\" onClick={cmtLike}>\n                      <i\n                        className={\n                          cmtHeartStatus ? \"fas fa-heart\" : \"far fa-heart\"\n                        }\n                      />\n                      <span name=\"cmtHeartCnt\">{cmtHeartCnt}</span>\n                    </div>\n                    <div className=\"comment-count\">\n                      <i className=\"far fa-comment\" />\n                      <span>0</span>\n                    </div>\n                    <div className=\"comment-other\">\n                      <i>...</i>\n                    </div>\n                  </div>\n                </div>\n                {/* <ul>\n                  <li>\n                    <div className=\"comment-profile\">\n                      <div className=\"userImage\">\n                        <i className=\"fas fa-user\" />\n                      </div>\n                    </div>\n                    <div className=\"comment\">\n                      <div className=\"comment-header\">fdgsfd</div>\n                      <div className=\"comment-content\">dsfadf</div>\n                      <div className=\"comment-footer\">\n                        <div className=\"comment-footer-left\">\n                          <span className=\"comment-date\">18시간</span>\n                          <span className=\"comment-reply-btn\">답글 달기</span>\n                        </div>\n                        <div className=\"comment-footer-right\">\n                          <div className=\"comment-like\">\n                            <i className=\"far fa-heart\" />\n                            <span>0</span>\n                          </div>\n                          <div className=\"comment-other\">\n                            <i>...</i>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"comment-reply\">\n                      <div className=\"comment-profile comment-reply-profile\">\n                        <div className=\"userImage\">\n                          <i className=\"fas fa-user\" />\n                        </div>\n                      </div>\n                      <div className=\"comment\">\n                        <div className=\"comment-reply-editer\">\n                          <textarea />\n                        </div>\n                        <div className=\"comment-reply-btnGroup\">\n                          <button>기</button>\n                        </div>\n                      </div>\n                    </div>\n                  </li>\n                </ul> */}\n              </div>\n            </li>\n            </Fragment>\n        );\n    }\n}\n\nexport default Comments;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from \"react\";\nimport Comments from \"../Comments\";\n\nclass CommentList extends Component {\n  state = {\n    cmtInput: '',\n    cmtHeartStatus: false,\n    cmtHeartCnt: 0,\n    cmtReply: false,\n    comments: [],\n  };\n\n  //댓글영역에서 글을 입력할 때 cmTInput에 value값 전달\n  handleChange = (e) => {\n    this.setState({\n      cmtInput: e.target.value,\n    });\n  }\n\n  //댓글영역에서 Enter키를 누르면 댓글 입력되게 설정\n  enterInput = (e) => {\n    if(e.key === 'Enter') {\n      this.handleInsert();\n    }\n  }\n\n  //댓글 추가\n  handleInsert = () => {\n    const { comments, cmtInput } = this.state;\n    \n    const addCmt = {\n      cmtText: cmtInput,\n    };\n\n    this.setState({\n      comments:[\n        ...comments, addCmt\n      ],\n      cmtInput:''\n    });\n    \n  }\n\n  //좋아요 버튼 클릭 시 토글 효과(좋아요 아이콘 on/off 및 좋아요 수치+1, -1)\n  cmtLike = e => {\n    const { cmtHeartStatus, cmtHeartCnt } = this.state;\n    this.setState({\n      cmtHeartStatus: !cmtHeartStatus\n    });\n\n    if (cmtHeartStatus) {\n      this.setState({\n        //false\n        cmtHeartCnt: cmtHeartCnt - 1\n      });\n    } else {\n      this.setState({\n        //true\n        cmtHeartCnt: cmtHeartCnt + 1\n      });\n    }\n  };\n\n  //답글달기 버튼 클릭 시 토글 효과(답글달기 영역 on/off)\n  cmtReplyToggle = e => {\n    const { cmtReply } = this.state;\n    this.setState({\n      cmtReply: !cmtReply\n    });\n  };\n\n  render() {\n    const { cmtHeartStatus, cmtHeartCnt, comments, cmtInput} = this.state;\n    const { cmtLike, cmtReplyToggle, handleInsert, handleChange, enterInput } = this;\n    //comments에 새로운 배열값이 들어갈 때 마다 새로운 댓글 템플릿 + 새로운 배열값 입력\n    const commentArray = comments.map((cmt, index) => (\n      <Comments\n        comments={cmt.cmtText}\n        key={index}\n        cmtHeartStatus={cmtHeartStatus}\n        cmtHeartCnt={cmtHeartCnt}\n        cmtLike={cmtLike}\n        cmtReplyToggle={cmtReplyToggle}\n      />\n      )\n    );\n    return (\n      <div className=\"detail-comment\">\n        <div className=\"detail-comment-header\">\n          <div className=\"comment-count\">1개의 덧글</div>\n          <ul className=\"comment-sort\">\n            <li>추천순</li>\n            <li>댓글순</li>\n          </ul>\n        </div>\n        <div className=\"comment-list\">\n          <ul>\n            {commentArray}\n          </ul>\n          <div className=\"comment-reply\">\n            <div className=\"comment-profile comment-reply-profile\">\n              <div className=\"userImage\">\n                <i className=\"fas fa-user\" />\n              </div>\n            </div>\n            <div className=\"comment\">\n              <div className=\"comment-reply-editer\">\n                <textarea onKeyPress={enterInput} onChange={handleChange} value={cmtInput}/>\n              </div>\n              <div className=\"comment-reply-btnGroup\">\n                <button onClick={handleInsert}>게시</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\n\nclass Close extends Component { \n    \n    closeDetail = () => {\n        const detail = document.querySelector('.App');\n        detail.innerHTML = '';\n    }\n\n    render(){\n        const { closeDetail } = this;\n\n        return (\n            <div className=\"detail-close\" onClick={closeDetail}>\n                <span></span>\n                <span></span>\n            </div>\n        );\n    }\n};\n\nexport default Close;","import React, { Component } from 'react';\nimport './Detail.scss';\nimport Sidebar from './Sidebar';\nimport DetailHeader from './Header';\nimport DetailContent from './Content';\nimport Info from './Info';\nimport Comments from './CommentList';\nimport Close from './Close';\n\n\nclass Detail extends Component {\n\n    \n\n    render() {\n        return (\n            <div className=\"detail-wrap\">\n                <Close />\n                <Sidebar />\n                <div className=\"detail\">\n                    <DetailHeader />\n                    <DetailContent />\n                    <Info />\n                    <Comments />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Detail;  ","import React, { Component } from 'react';\nimport Detail from './components/Detail';\nimport './styles/reset.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Detail />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}